/* ======================================================================== */
/* ================ Стандартные функции сбора статистики ================== */
/* ======================================================================== */
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
debuglog("func-stat.mac", debug_message_module_load)$
/* ========================== */
/* Сохранение всей статистики */
/* ========================== */
debuglog("save_statistic", debug_message_func_load);
save_statistic() := block([res], res : true,
	if tasksolver_function_statistic_log=true then block([],
		fl : openw("./service_files/statistic.mac"),
		printf(fl, "function_calls_statistical_data : ~a$", function_calls_statistical_data),
		close(fl)),
	/* save("service_files/statistic", function_calls_statistical_data, project_processing_statistical_data), */
	res)$
/* ==================================== */
/* Дополнение статистики вызова функции */
/* ==================================== */
debuglog("update_function_calls_statistic", debug_message_func_load);
update_function_calls_statistic(f_name, f_props, f_time_date, f_call_depth, f_spent_real_time, f_spent_run_time) := block([res, s_data], res : true,
	/* debug_start_function("update_function_calls_statistic", [fp_mid_level, fp_common]), */
	/* Каждая статистическая запись представляет собой список вида */
	/* [имя_функции, свойства_функции, время_вызова, уровень_вложенности, затраченное_реальное_время, затраченное_внутреннее_время] */
	if tasksolver_function_statistic_log=true then block([],
		s_data : [f_name, f_props, f_time_date, f_call_depth, f_spent_real_time, f_spent_run_time],
		push(s_data, function_calls_statistical_data)),
	/*debug_end_function(),*/
	res)$
/* ==================================== */
/* Расчет статистики вызовов функций */
/* ==================================== */
debuglog("calculate_function_calls_statistic", debug_message_func_load);
calculate_function_calls_statistic() := block([res, cntr, max_dt, min_dt], 
	debug_start_function("calculate_function_calls_statistic", [fp_mid_level, fp_common]),
	res : [],
	if tasksolver_function_statistic_log#true then go(tag_exit),
	if length(function_calls_statistical_data)=0 then go(tag_exit),
	max_dt : min_dt : function_calls_statistical_data[1][3],
	cntr : 0,
	/* Сбор информации о вызовах функций */
	debuglog(printf(false, "collect information about function calls")),
	for stt in function_calls_statistical_data do block([add_new], add_new : true,
		cntr : cntr+1,
		/*if mod(cntr, 100)=0 then res : sort(res, lambda([a, b], length(a[4])>length(b[4]))),	сортируем список для ускорения работы */
		if debuglog_is_on=false then block([],
			if mod(cntr, 10)=0 then printf(true,"+")),
		debuglog(printf(false, "cntr=~a, stt=~a", cntr, stt)),
		if compare_strings(stt[3], max_dt)=+1 then max_dt : stt[3],
		if compare_strings(stt[3], min_dt)=-1 then min_dt : stt[3],
		debuglog(printf(false, "max_dt=~a, min_dt=~a", max_dt, min_dt)),
		for i : 1 thru length(res) while add_new do block([],
			if sequal(res[i][1], stt[1]) then block([r_i, l],
				r_i : res[i],
				debuglog(printf(false, "equal when i=~a", i)),
				l : r_i[4], l : push(stt[4], l), r_i[4] : l,
				/* res[i][4] : cons(stt[4], res[i][4]), */
				debuglog(printf(false, "stt[4]=~a, r_i[4]=~a, l=~a", stt[4], r_i[4], l)),
				l : r_i[5], l : push(stt[5], l), r_i[5] : l,
				/*res[i][5] : cons(stt[5], res[i][5]),*/
				debuglog(printf(false, "stt[5]=~a, r_i[5]=~a, l=~a", stt[5], r_i[5], l)),
				l : r_i[6], l : push(stt[6], l), r_i[6] : l,
				/*res[i][6] : cons(stt[6], res[i][6]),*/
				debuglog(printf(false, "stt[6]=~a, r_i[6]=~a, l=~a", stt[6], r_i[6], l)),
				res[i] : r_i,
				add_new : false)),
		debuglog(printf(false, "add_new=~a", add_new)),
		if add_new=true then block([],
			push([stt[1], stt[2], stt[3], [stt[4]], [stt[5]], [stt[6]]], res)),
		debuglog(printf(false, "res=~a", res))),
	/* Обработка собранной информации */
	debuglog(printf(false, "proceed information about function calls")),
	for i : 1 thru length(res) do block([r_i, fn_dt, l_d, n, m, d, vmn, vmx],
		debuglog(printf(false, "i=~a, res[i]=~a", i, res[i])),
		r_i : res[i],
		fn_dt : res[i],
		l_d : fn_dt[4],
		n : length(l_d),
		m : float(lsum(x, x, l_d)/n),
		d : sqrt(float(lsum((x-m)^2, x, l_d)/n)),
		vmn : lmin(l_d),
		vmx : lmax(l_d),
		debuglog(printf(false, "l_d=~a", l_d)),
		r_i[4] : [n, m, d, vmn, vmx],
		l_d : fn_dt[5],
		n : length(l_d),
		m : float(lsum(x, x, l_d)/n),
		d : sqrt(float(lsum((x-m)^2, x, l_d)/n)),
		vmn : lmin(l_d),
		vmx : lmax(l_d),
		debuglog(printf(false, "l_d=~a", l_d)),
		r_i[5] : [n, m, d, vmn, vmx],
		l_d : fn_dt[6],
		n : length(l_d),
		m : float(lsum(x, x, l_d)/n),
		d : sqrt(float(lsum((x-m)^2, x, l_d)/n)),
		vmn : lmin(l_d),
		vmx : lmax(l_d),
		debuglog(printf(false, "l_d=~a", l_d)),
		r_i[6] : [n, m, d, vmn, vmx],
		debuglog(printf(false, "l_d=~a", l_d)),
		res[i] : r_i),
		res : [min_dt, max_dt, res],
	tag_exit,
	debuglog(printf(false, "res=~a", res)),
	debug_end_function(),
	res)$
/* ================================================================= */
/* Перевод в текстовую форму рассчитанной статистики вызовов функций */
/* ================================================================= */
debuglog("text_function_calls_statistic", debug_message_func_load);
text_function_calls_statistic(fcs) := block([res, s_d], res : "",
	debug_start_function("text_function_calls_statistic", [fp_mid_level, fp_common]),
	if tasksolver_function_statistic_log#true then go(tag_exit),
	debuglog(printf(false, "fcs=~a", fcs)),
	if length(fcs)=0 then go(tag_exit),
	s_d : smake(130, "-"),
	res : printf(false, "Function calls statistic. ~%Time ~a - ~a. ~%TaskSolver version ~a.~%", fcs[1], fcs[2], tasksolver_version),
	res : printf(false, "~a~a~%", res, s_d),
	res : printf(false, 
		"~a| Function name ~40t| num |         Depth          |         Internal time      |          Real time         |~%", 
		res),
	res : printf(false, "~a~a~%", res, s_d),
	for i in fcs[3] do block([],
		debuglog(printf(false, "i=~a", i)),
		res : printf(false, 
			"~a| ~a~40t|~4d |~6,2f ~6,2f ~4d ~4d |~6,2f ~6,2f ~6,2f ~6,2f |~6,2f ~6,2f ~6,2f ~6,2f |~%", 
			res,
			i[1], i[4][1], i[4][2], i[4][3], i[4][4], i[4][5], 
			i[5][2], i[5][3], i[5][4], i[5][5],
			i[6][2], i[6][3], i[6][4], i[6][5])),
	res : printf(false, "~a~a~%", res, s_d),
	tag_exit,
	debug_end_function(),
	res)$
/* ==================================== */
/* Архивация статистики вызовов функций */
/* ==================================== */
debuglog("archive_function_calls_statistic", debug_message_func_load);
archive_function_calls_statistic() := block([res, fl, fc_st, s], res : true,
	debug_start_function("archive_function_calls_statistic", [fp_mid_level, fp_common]),
	if tasksolver_function_statistic_log#true then go(tag_exit),
	debuglog_is_on : false,
	fc_st : calculate_function_calls_statistic(),
	debuglog_is_on : true,
	s : text_function_calls_statistic(fc_st),
	if slength(s)>0 then block([],
		fl : opena("service_files/calc_statistic.txt"),
		printf(fl, "~a~%", s),
		close(fl)),
	function_calls_statistical_data : [],
	tag_exit,
	debug_end_function(),
	res)$
/* ==================================== */
compare_strings(str1, str2) := block([res, l1, l2], res : 0,
	l1 : slength(str1),
	l2 : slength(str2),
	if l1=l2 then block([c1, c2, t_e],
		c1 : charlist(str1),
		c2 : charlist(str2),
		t_e : true,
		for i : 1 thru l1 while t_e#false do block([],
			if clessp(c1[i], c2[i]) then block([],
				res : -1,
				t_e : false),
			if cgreaterp(c1[i], c2[i]) then block([],
				res : +1,
				t_e : false))),
	if l1>l2 then res : -1,
	if l1<l2 then res : +1,
	res)$
/* ======================================== */
/* [имя_функции, свойства_функции, время_вызова, уровень_вложенности, затраченное_реальное_время, затраченное_внутреннее_время] */
gen_text_function_calls_statistical_data() := block([res], res : "",
	for fcsd in function_calls_statistical_data do
		res : printf(false, "~a~a - ~a - ~a - ~a - ~a - ~a~%", res, fcsd[1], fcsd[2], fcsd[3], fcsd[4], fcsd[5], fcsd[6]),
	res)$
