/* ==================================================== */
/* ================ Формальные задания ================ */
/* ============ Дифференциальная геометрия ============ */
/* ==================================================== */
debuglog("ft_diffgeom.mac", debug_message_module_load)$
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++ */
/* Найти векторы репера Френе для кривой на плоскости, записать уравнения касательной и нормали, вычислить кривизну в данной точке */
debuglog("curve_param_2d_point", debug_message_func_load)$
curve_param_2d_point(prs) := block(
	[res, 																/* результат функции */
	xt, yt,																/* параметрические уравнения кривой */
	t0,																	/* точка, в которой все ищется */
	xt_s, yt_s, xt0, yt0, xt0_s, yt0_s, dxt, dyt, dxt_s, dyt_s,
	vx, vy, vx_s, vy_s, dxt0, dyt0, dxt0_s, dyt0_s, vx0, vy0, vx0_s, vy0_s,
	pr, rs, rs_s, rs_ans,
	st, ss, s_l, s, tbl_s, 												/* строковые составляющие решения */
	answ], 																/* ответ для решения */
	s_l : [],
	debug_start_function("curve_param_2d_point", [fp_high_level, fp_solver]),
	xt : get_val_by_alias(prs, "x(t)"),
	yt : get_val_by_alias(prs, "y(t)"),
	t0 : get_val_by_alias(prs, "t0"),
	xt_s : totex(xt),
	yt_s : totex(yt),
	t0_s : totex(t0),
	debuglog(printf(false, "xt=~a; yt=~a; t0=~a;", xt, yt, t0)),
	st : printf(false, "Найти векторы репера Френе для кривой на плоскости, заданной уравнениями $x(t)=~a$, $y(t)=~a$. Записать уравнения касательной и нормали, вычислить кривизну в точке $M_0(t_0=~a)$.", 
				xt_s, yt_s, t0_s),
	append_to_s_l("$\\overline{r}=\\left\\lbrace ~a ; ~a \\right\\rbrace$~2%", xt_s, yt_s),
	xt0 : ev(xt, t = t0),
	yt0 : ev(yt, t = t0),
	xt0_s : totex(xt0),
	yt0_s : totex(yt0),
	debuglog(printf(false, "xt0=~a; yt0=~a;", xt0, yt0)),
	append_to_s_l("$\\overline{r}_0=\\left\\lbrace ~a ; ~a \\right\\rbrace$~2%", xt0_s, yt0_s),
	dxt : diff(xt, t),
	dyt : diff(yt, t),
	dxt_s : totex(dxt),
	dyt_s : totex(dyt),
	debuglog(printf(false, "dxt=~a; dyt=~a;", dxt, dyt)),
	append_to_s_l("$x'=\\frac{dx}{dt}=~a$, $y'=\\frac{dy}{dt}=~a$~2%", dxt_s, dyt_s),
	append_to_s_l("$\\overline{r}'=\\left\\lbrace ~a ; ~a \\right\\rbrace$~2%", dxt_s, dyt_s),
	vx : trigsimp(dxt/sqrt(dxt^2 + dyt^2)),
	vy : trigsimp(dyt/sqrt(dxt^2 + dyt^2)),
	vx_s : totex(vx),
	vy_s : totex(vy),
	debuglog(printf(false, "vx=~a; vy=~a;", vx, vy)),
	append_to_s_l("$\\overline{v}=\\left\\lbrace ~a ; ~a \\right\\rbrace$ --- касательный вектор.~2%", vx_s, vy_s),
	dxt0 : ev(dxt, t = t0),
	dyt0 : ev(dyt, t = t0),
	dxt0_s : totex(dxt0),
	dyt0_s : totex(dyt0),
	debuglog(printf(false, "dxt0=~a; dyt0=~a;", dxt0, dyt0)),
	append_to_s_l("$\\overline{r}'_0=\\left\\lbrace ~a ; ~a \\right\\rbrace$~2%", dxt0_s, dyt0_s),
	vx0 : ev(vx, t = t0),
	vy0 : ev(vy, t = t0),
	vx0_s : totex(vx0),
	vy0_s : totex(vy0),
	debuglog(printf(false, "vx0=~a; vy0=~a;", vx0, vy0)),
	append_to_s_l("$\\overline{v}_0=\\left\\lbrace ~a ; ~a \\right\\rbrace$~2%", vx0_s, vy0_s),
	nx0 :  vy0,
	ny0 : -vx0,
	nx0_s : totex(nx0),
	ny0_s : totex(ny0),
	debuglog(printf(false, "nx0=~a; ny0=~a;", nx0, ny0)),
	append_to_s_l("$\\overline{n}_0=\\left\\lbrace ~a ; ~a \\right\\rbrace$ --- вектор нормали.~2%", nx0_s, ny0_s),
	append_to_s_l("Уравнение касательной:~2%"),
	eq_x_numerator : totex(x - xt0),
	eq_y_numerator : totex(y - yt0),
	append_to_s_l("$\\frac{~a}{~a}=\\frac{~a}{~a}$~2%", eq_x_numerator, dxt0_s, eq_y_numerator, dyt0_s),
	eq_xy : vy0*x-vx0*y-(vy0*xt0-vx0*yt0)=0,
	debuglog(printf(false, "eq_xy=~a;", eq_xy)),
	append_to_s_l("$~a$~2%", totex(eq_xy)),
	append_to_s_l("Уравнение нормали:~2%"),
	eq_x_numerator : totex(x - xt0),
	eq_y_numerator : totex(y - yt0),
	append_to_s_l("$\\frac{~a}{~a}=\\frac{~a}{~a}$~2%", eq_x_numerator, nx0_s, eq_y_numerator, ny0_s),
	eq_xy : ny0*x-nx0*y-(ny0*xt0-nx0*yt0)=0,
	debuglog(printf(false, "eq_xy=~a;", eq_xy)),
	append_to_s_l("$~a$~2%", totex(eq_xy)),
	append_to_s_l("Кривизна кривой:~2%"),
	ddxt : diff(xt, t, 2),
	ddyt : diff(yt, t, 2),
	ddxt_s : totex(ddxt),
	ddyt_s : totex(ddyt),
	debuglog(printf(false, "ddxt=~a; ddyt=~a;", ddxt, ddyt)),
	append_to_s_l("$x''=\\frac{d^2x}{dt^2}=~a$, $y''=\\frac{d^2y}{dt^2}=~a$~2%", ddxt_s, ddyt_s),
	append_to_s_l("$\\overline{r}''=\\left\\lbrace ~a ; ~a \\right\\rbrace$~2%", ddxt_s, ddyt_s),
	ddxt0 : ev(ddxt, t = t0),
	ddyt0 : ev(ddyt, t = t0),
	ddxt0_s : totex(ddxt0),
	ddyt0_s : totex(ddyt0),
	debuglog(printf(false, "ddxt0=~a; ddyt0=~a;", ddxt0, ddyt0)),
	append_to_s_l("$x''_0=~a$, $y''_0=~a$~2%", ddxt0_s, ddyt0_s),
	append_to_s_l("$\\overline{r}''_0=\\left\\lbrace ~a ; ~a \\right\\rbrace$~2%", ddxt0_s, ddyt0_s),
	kk : trigsimp((ddyt0*dxt0 - ddxt0*dyt0)/(sqrt(dxt0^2 + dyt0^2)^3)),
	kk_s : totex(kk),
	debuglog(printf(false, "kk=~a;", kk)),
	append_to_s_l("$\\kappa=\\frac{y''\\cdot x' - x''\\cdot y'}{\\sqrt{{x'}^2+{y'}^2}^3}=~a$~2%", kk_s),
	tag_exit,
	answ : [[type = ts_value, 
		ts_name = "кривизна", 
		ts_alias = "kappa", 
		value = kk]],
	res : gen_solver_res(st, s_l, answ),
	debuglog(printf(false, "result=~a", res)),
	debug_end_function(),
	res)$
/* ================================================================== */
/* Найти векторы репера Френе для кривой в пространстве, записать     */
/* уравнения прямых (касательной, нормали, бинормали) и плоскостей    */
/* (касательной, нормальной, спрямляющей), вычислить кривизну и       */
/* кручение в данной точке                                            */
/* ================================================================== */
debuglog("curve_param_3d_point", debug_message_func_load)$
curve_param_3d_point(prs) := block(
	[res, 																/* результат функции */
	xt, yt, zt,															/* параметрические уравнения кривой */
	t0,																	/* точка, в которой все ищется */
	xt_s, yt_s, zt_s, xt0, yt0, zt0, xt0_s, yt0_s, zt0_s, dxt, dyt, dzt, dxt_s, dyt_s, dzt_s,
	vx, vy, vz, vx_s, vy_s, vz_s, dxt0, dyt0, dzt0, dxt0_s, dyt0_s, dzt0_s, vx0, vy0, vz0, vx0_s, vy0_s, vz0_s,
	vmuldxdd0,
	pr, rs, rs_s, rs_ans,
	st, ss, s_l, s, tbl_s, 												/* строковые составляющие решения */
	answ], 																/* ответ для решения */
	s_l : [],
	debug_start_function("curve_param_3d_point", [fp_high_level, fp_solver]),
	xt : get_val_by_alias(prs, "x(t)"),
	yt : get_val_by_alias(prs, "y(t)"),
	zt : get_val_by_alias(prs, "z(t)"),
	t0 : get_val_by_alias(prs, "t0"),
	xt_s : totex(xt),
	yt_s : totex(yt),
	zt_s : totex(zt),
	t0_s : totex(t0),
	debuglog(printf(false, "xt=~a; yt=~a; zt=~a; t0=~a;", xt, yt, zt, t0)),
	st : printf(false, "Найти векторы репера Френе для кривой в пространстве, заданной уравнениями $x(t)=~a$, $y(t)=~a$, $z(t)=~a$. Записать уравнения касательной, нормали и бинормали, вычислить кривизну и кручение в точке $M_0(t_0=~a)$.", 
				xt_s, yt_s, zt_s, t0_s),
	append_to_s_l("$\\overline{r}=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", xt_s, yt_s, zt_s),
	xt0 : ev(xt, t = t0),
	yt0 : ev(yt, t = t0),
	zt0 : ev(zt, t = t0),
	xt0_s : totex(xt0),
	yt0_s : totex(yt0),
	zt0_s : totex(zt0),
	debuglog(printf(false, "xt0=~a; yt0=~a; zt0=~a;", xt0, yt0, zt0)),
	append_to_s_l("$\\overline{r}_0=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", xt0_s, yt0_s, zt0_s),
	/* первые производные */
	dxt : diff(xt, t),
	dyt : diff(yt, t),
	dzt : diff(zt, t),
	dxt_s : totex(dxt),
	dyt_s : totex(dyt),
	dzt_s : totex(dzt),
	debuglog(printf(false, "dxt=~a; dyt=~a; dzt=~a;", dxt, dyt, dzt)),
	append_to_s_l("$x'=\\frac{dx}{dt}=~a$, $y'=\\frac{dy}{dt}=~a$, $z'=\\frac{dz}{dt}=~a$~2%", dxt_s, dyt_s, dzt_s),
	append_to_s_l("$\\overline{r}'=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", dxt_s, dyt_s, dzt_s),
	/* касательный вектор */
	vx : trigsimp(dxt/sqrt(dxt^2+dyt^2+dzt^2)),
	vy : trigsimp(dyt/sqrt(dxt^2+dyt^2+dzt^2)),
	vz : trigsimp(dzt/sqrt(dxt^2+dyt^2+dzt^2)),
	vx_s : totex(vx),
	vy_s : totex(vy),
	vz_s : totex(vz),
	debuglog(printf(false, "vx=~a; vy=~a; vz=~a;", vx, vy, vz)),
	append_to_s_l("$\\overline{v}=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$ --- касательный вектор.~2%", vx_s, vy_s, vz_s),
	/* первые производные в точке */
	dxt0 : ev(dxt, t = t0),
	dyt0 : ev(dyt, t = t0),
	dzt0 : ev(dzt, t = t0),
	dxt0_s : totex(dxt0),
	dyt0_s : totex(dyt0),
	dzt0_s : totex(dzt0),
	debuglog(printf(false, "dxt0=~a; dyt0=~a; dzt0=~a;", dxt0, dyt0, dzt0)),
	append_to_s_l("$\\overline{r}'_0=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", dxt0_s, dyt0_s, dzt0_s),
	dr0l : sqrt(dxt0^2+dyt0^2+dzt0^2),
	dr0l_s : totex(dr0l),
	append_to_s_l("$|\\overline{r}'_0|=\\sqrt{(~a)^2+(~a)^2+(~a)^2}=~a$~2%", 
		dxt0_s, dyt0_s, dzt0_s, dr0l_s),
	/* касательный вектор в точке */
	vx0 : ev(vx, t = t0),
	vy0 : ev(vy, t = t0),
	vz0 : ev(vz, t = t0),
	vx0_s : totex(vx0),
	vy0_s : totex(vy0),
	vz0_s : totex(vz0),
	debuglog(printf(false, "vx0=~a; vy0=~a; vz0=~a;", vx0, vy0, vz0)),
	append_to_s_l("Касательный вектор:~2%"),
	append_to_s_l("$\\overline{v}_0=\\frac{\\overline{r}'_0}{|\\overline{r}'_0|}=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", vx0_s, vy0_s, vz0_s),
	/* вторые производные */
	ddxt : diff(xt, t, 2),
	ddyt : diff(yt, t, 2),
	ddzt : diff(zt, t, 2),
	ddxt_s : totex(ddxt),
	ddyt_s : totex(ddyt),
	ddzt_s : totex(ddzt),
	debuglog(printf(false, "ddxt=~a; ddyt=~a; ddzt=~a", ddxt, ddyt, ddzt)),
	append_to_s_l("$x''=\\frac{d^2x}{dt^2}=~a$, $y''=\\frac{d^2y}{dt^2}=~a$, $z''=\\frac{d^2z}{dt^2}=~a$~2%", ddxt_s, ddyt_s, ddzt_s),
	append_to_s_l("$\\overline{r}''=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", ddxt_s, ddyt_s, ddzt_s),
	/* вторые производные в точке */
	ddxt0 : ev(ddxt, t = t0),
	ddyt0 : ev(ddyt, t = t0),
	ddzt0 : ev(ddzt, t = t0),
	ddxt0_s : totex(ddxt0),
	ddyt0_s : totex(ddyt0),
	ddzt0_s : totex(ddzt0),
	debuglog(printf(false, "ddxt0=~a; ddyt0=~a; ddzt0=~a;", ddxt0, ddyt0, ddzt0)),
	append_to_s_l("$x''_0=~a$, $y''_0=~a$, $z''_0=~a$~2%", ddxt0_s, ddyt0_s, ddzt0_s),
	append_to_s_l("$\\overline{r}''_0=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", ddxt0_s, ddyt0_s, ddzt0_s),
	/* векторное произведение первой и второй производных */
	pr : [[alias = "v", value = [dxt0, dyt0, dzt0]],
		[alias = "w", value = [ddxt0, ddyt0, ddzt0]],
		[alias = "v name", value = "\\overline{r}'_0"],
		[alias = "w name", value = "\\overline{r}''_0"]],
	rs : vector_vector_product(pr),
	rs_s : getprop(rs, solution),
	append_to_s_l("~a~2%", rs_s),
	rs_ans : getprop(rs, answer),
	vmuldxdd0 : getprop(rs_ans[1], value),
	pr : [[alias = "v", value = vmuldxdd0],
		[alias = "v name", value = "\\overline{r}'_0\\times \\overline{r}''_0"]],
	rs : vector_length(pr),
	rs_s : getprop(rs, solution),
	append_to_s_l("~a~2%", rs_s),
	rs_ans : getprop(rs, answer),
	vmuldxdd0l : getprop(rs_ans[1], value),
	bx0 : vmuldxdd0[1]/vmuldxdd0l,
	by0 : vmuldxdd0[2]/vmuldxdd0l,
	bz0 : vmuldxdd0[3]/vmuldxdd0l,
	bx0_s : totex(bx0),
	by0_s : totex(by0),
	bz0_s : totex(bz0),
	append_to_s_l("Вектор бинормали:~2%"),
	append_to_s_l("$\\overline{b_0}=\\frac{\\overline{r}'_0\\times \\overline{r}''_0}{|\\overline{r}'_0\\times \\overline{r}''_0|}=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", 
		bx0_s, by0_s, bz0_s),
	/* векторное произведение вектора бинормали на касательный вектор */
	pr : [[alias = "v", value = [bx0, by0, bz0]],
		[alias = "w", value = [vx0, vy0, vz0]],
		[alias = "v name", value = "\\overline{b}_0"],
		[alias = "w name", value = "\\overline{v}_0"]],
	rs : vector_vector_product(pr),
	rs_s : getprop(rs, solution),
	append_to_s_l("~a~2%", rs_s),
	rs_ans : getprop(rs, answer),
	n_vec : getprop(rs_ans[1], value),
	nx0 : n_vec[1],
	ny0 : n_vec[2],
	nz0 : n_vec[3],
	nx0_s : totex(nx0),
	ny0_s : totex(ny0),
	nz0_s : totex(nz0),
	append_to_s_l("Вектор нормали:~2%"),
	append_to_s_l("$\\overline{n_0}=\\overline{b}_0\\times \\overline{v}_0=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", 
		nx0_s, ny0_s, nz0_s),
	/* уравнения прямых */
	append_to_s_l("Запишем уравнение касательной прямой:~2%"),
	eq_x_num_s : totex(x-xt0),
	eq_y_num_s : totex(y-yt0),
	eq_z_num_s : totex(z-zt0),
	append_to_s_l("$$\\frac{~a}{~a}=\\frac{~a}{~a}=\\frac{~a}{~a}$$~2%", 
		eq_x_num_s, vx0_s, eq_y_num_s, vy0_s, eq_z_num_s, vz0_s),
	append_to_s_l("Запишем уравнение нормали:~2%"),
	append_to_s_l("$$\\frac{~a}{~a}=\\frac{~a}{~a}=\\frac{~a}{~a}$$~2%", 
		eq_x_num_s, nx0_s, eq_y_num_s, ny0_s, eq_z_num_s, nz0_s),
	append_to_s_l("Запишем уравнение бинормали:~2%"),
	append_to_s_l("$$\\frac{~a}{~a}=\\frac{~a}{~a}=\\frac{~a}{~a}$$~2%", 
		eq_x_num_s, bx0_s, eq_y_num_s, by0_s, eq_z_num_s, bz0_s),
	/* уравнения плоскостей */
	append_to_s_l("Запишем уравнение нормальной плоскости:~2%"),
	eq_plane_s : totex(vx0*(x-xt0)+vy0*(y-yt0)+vz0*(z-zt0) = 0),
	append_to_s_l("$$~a$$~2%", eq_plane_s),
	eq_plane_s1 : totex(vx0*x+vy0*y+vz0*z-(vx0*xt0+vy0*yt0+vz0*zt0) = 0),
	if (eq_plane_s # eq_plane_s1) then
		append_to_s_l("$$~a$$~2%", eq_plane_s1),
	append_to_s_l("Запишем уравнение соприкасающейся плоскости:~2%"),
	eq_plane_s : totex(nx0*(x-xt0)+ny0*(y-yt0)+nz0*(z-zt0) = 0),
	append_to_s_l("$$~a$$~2%", eq_plane_s),
	eq_plane_s1 : totex(nx0*x+ny0*y+nz0*z-(nx0*xt0+ny0*yt0+nz0*zt0) = 0),
	if (eq_plane_s # eq_plane_s1) then
		append_to_s_l("$$~a$$~2%", eq_plane_s1),
	append_to_s_l("Запишем уравнение спрямляющей плоскости:~2%"),
	eq_plane_s : totex(bx0*(x-xt0)+by0*(y-yt0)+bz0*(z-zt0) = 0),
	append_to_s_l("$$~a$$~2%", eq_plane_s),
	eq_plane_s1 : totex(bx0*x+by0*y+bz0*z-(bx0*xt0+by0*yt0+bz0*zt0) = 0),
	if (eq_plane_s # eq_plane_s1) then
		append_to_s_l("$$~a$$~2%", eq_plane_s1),
	/* кривизна */
	kk : vmuldxdd0l/dr0l,
	kk_s : totex(kk),
	append_to_s_l("Найдем кривизну:~2%"),
	append_to_s_l("$$\\kappa=\\frac{|\\overline{r}'_0\\times \\overline{r}''_0|}{|\\overline{r}'_0|^3}=~a$$~2%", 
		kk_s),
	/* кручение */
	/* третьи производные */
	dddxt : diff(xt, t, 3),
	dddyt : diff(yt, t, 3),
	dddzt : diff(zt, t, 3),
	dddxt_s : totex(dddxt),
	dddyt_s : totex(dddyt),
	dddzt_s : totex(dddzt),
	debuglog(printf(false, "dddxt=~a; dddyt=~a; dddzt=~a", dddxt, dddyt, dddzt)),
	append_to_s_l("$x'''=\\frac{d^3x}{dt^3}=~a$, $y'''=\\frac{d^3y}{dt^3}=~a$, $z'''=\\frac{d^3z}{dt^3}=~a$~2%", 
		dddxt_s, dddyt_s, dddzt_s),
	append_to_s_l("$\\overline{r}'''=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", dddxt_s, dddyt_s, dddzt_s),
	/* третьи производные в точке */
	dddxt0 : ev(dddxt, t = t0),
	dddyt0 : ev(dddyt, t = t0),
	dddzt0 : ev(dddzt, t = t0),
	dddxt0_s : totex(dddxt0),
	dddyt0_s : totex(dddyt0),
	dddzt0_s : totex(dddzt0),
	debuglog(printf(false, "dddxt0=~a; dddyt0=~a; dddzt0=~a;", dddxt0, dddyt0, dddzt0)),
	append_to_s_l("$x'''_0=~a$, $y'''_0=~a$, $z'''_0=~a$~2%", dddxt0_s, dddyt0_s, dddzt0_s),
	append_to_s_l("$\\overline{r}'''_0=\\left\\lbrace ~a ; ~a ; ~a \\right\\rbrace$~2%", dddxt0_s, dddyt0_s, dddzt0_s),
	/* смешанное произведение */
	pr : [[alias = "v", value = [dxt0, dyt0, dzt0]],
		[alias = "w", value = [ddxt0, ddyt0, ddzt0]],
		[alias = "u", value = [dddxt0, dddyt0, dddzt0]],
		[alias = "v name", value = "\\overline{r}'_0"],
		[alias = "w name", value = "\\overline{r}''_0"],
		[alias = "u name", value = "\\overline{r}'''_0"]],
	rs : vector_mixed_product(pr),
	rs_s : getprop(rs, solution),
	append_to_s_l("~a~2%", rs_s),
	rs_ans : getprop(rs, answer),
	mixmul0 : getprop(rs_ans[1], value),
	hh : mixmul0/vmuldxdd0l^2,
	hh_s : totex(hh),
	append_to_s_l("Найдем кручение:~2%"),
	append_to_s_l("$$\\chi=\\frac{\\left(\\overline{r}'_0;\\overline{r}''_0;\\overline{r}'''_0\\right)}{|\\overline{r}'_0\\times \\overline{r}''_0|^2}=~a$$~2%", 
		hh_s),
	/* !TODO! */
	tag_exit,
	answ : [[type = ts_value, 
		ts_name = "кривизна", 
		ts_alias = "kappa", 
		value = kk],
		[type = ts_value, 
		ts_name = "кручение", 
		ts_alias = "chi", 
		value = hh]],
	res : gen_solver_res(st, s_l, answ),
	debuglog(printf(false, "result=~a", res)),
	debug_end_function(),
	res)$
/* Вычислить длину дуги кривой на плоскости, заланной параметрическими уравнениями */
/* Вычислить длину дуги кривой в пространстве, заланной параметрическими уравнениями */
/* !TODO! */
/* Для данной поверхности, заданной параметрическими уравнениями, найти вектор нормали, записать уравнение нормали и касательной плоскости. Найти первую и вторую квадратичные формы. Найти полную и среднюю кривизну поверхности */
debuglog("surface_param_point", debug_message_func_load)$
surface_param_point(prs) := block(
	[res, 																/* результат функции */
	xx, yy, zz, 														/* параметрические уравнения поверхности */
	u0, v0, 															/* локальные координаты точки, в которой все ищется */	xt_s, yt_s, xt0, yt0, xt0_s, yt0_s, dxt, dyt, dxt_s, dyt_s,
	xx_s, yy_s, zz_s, 
	dxx1, dyy1, dzz1, dxx2, dyy2, dzz2,
	dxx1_s, dyy1_s, dzz1_s, dxx2_s, dyy2_s, dzz2_s,
	ddxx20, ddyy20, ddzz20, ddxx02, ddyy02, ddzz02, ddxx11, ddyy11, ddzz11,
	ddxx20_s, ddyy20_s, ddzz20_s, ddxx02_s, ddyy02_s, ddzz02_s, ddxx11_s, ddyy11_s, ddzz11_s,
	pr, rs, rs_s, rs_ans,
	st, ss, s_l, s, tbl_s, 												/* строковые составляющие решения */
	answ], 																/* ответ для решения */
	s_l : [],
	debug_start_function("surface_param_point", [fp_high_level, fp_solver]),
	xx : get_val_by_alias(prs, "x(u,v)"),
	yy : get_val_by_alias(prs, "y(u,v)"),
	u0 : get_val_by_alias(prs, "u0"),
	v0 : get_val_by_alias(prs, "v0"),
	xx_s : totex(xx),
	yy_s : totex(yy),
	zz_s : totex(zz),
	append_to_s_l("$\vec{r}=\\left\\{ ~a ; ~a ; ~a \\}\\right$~2%", xx_s, yy_s, zz_s),
	dxx1 : diff(xx, u),
	dyy1 : diff(yy, u),
	dzz1 : diff(zz, u),
	dxx2 : diff(xx, v),
	dyy2 : diff(yy, v),
	dzz2 : diff(zz, v),
	dxx1_s : totex(dxx1),
	dyy1_s : totex(dyy1),
	dzz1_s : totex(dzz1),
	dxx2_s : totex(dxx2),
	dyy2_s : totex(dyy2),
	dzz2_s : totex(dzz2),
	append_to_s_l("$\\frac{\\partial x}{\\partial u}=~a$; $\\frac{\\partial y}{\\partial u}=~a$; $\\frac{\\partial z}{\\partial u}=~a$; $\\frac{\\partial x}{\\partial v}=~a$; $\\frac{\\partial y}{\\partial v}=~a$; $\\frac{\\partial z}{\\partial v}=~a$;~2%", 
				dxx1_s, dyy1_s, dzz1_s, dxx2_s, dyy2_s, dzz2_s),
	append_to_s_l("$\\vec{r_1}=\\frac{\\partial \\vec{r}}{\\partial u}=\\left\\{ ~a ; ~a ; ~a \\}\\right$;~2%", dxx1_s, dyy1_s, dzz1_s),
	append_to_s_l("$\\vec{r_2}=\\frac{\\partial \\vec{r}}{\\partial v}=\\left\\{ ~a ; ~a ; ~a \\}\\right$;~2%", dxx2_s, dyy2_s, dzz2_s),
	/* !TODO! */
	ddxx20 : diff(xx, u, 2),
	ddyy20 : diff(yy, u, 2),
	ddzz20 : diff(zz, u, 2),
	ddxx02 : diff(xx, v, 2),
	ddyy02 : diff(yy, v, 2),
	ddzz02 : diff(zz, v, 2),
	ddxx11 : diff(xx, u, 1, v, 1),
	ddyy11 : diff(yy, u, 1, v, 1),
	ddzz11 : diff(zz, u, 1, v, 1),
	ddxx20_s : totex(ddxx20),
	ddyy20_s : totex(ddyy20),
	ddzz20_s : totex(ddzz20),
	ddxx02_s : totex(ddxx02),
	ddyy02_s : totex(ddyy02),
	ddzz02_s : totex(ddzz02),
	ddxx11_s : totex(ddxx11),
	ddyy11_s : totex(ddyy11),
	ddzz11_s : totex(ddzz11),
	append_to_s_l("$\\vec{r_11}=\\frac{\\partial^2 \\overline{r}}{\\partial u^2}=\\left\\{ ~a ; ~a ; ~a \\}\\right$;~2%", 
		ddxx20_s, ddyy20_s, ddzz20_s),
	append_to_s_l("$\\vec{r_12}=\\frac{\\partial^2 \\overline{r}}{\\partial u \\partial v}=\\left\\{ ~a ; ~a ; ~a \\}\\right$;~2%", 
		ddxx11_s, ddyy11_s, ddzz11_s),
	append_to_s_l("$\\vec{r_22}=\\frac{\\partial^2 \\overline{r}}{\\partial v^2}=\\left\\{ ~a ; ~a ; ~a \\}\\right$;~2%", 
		ddxx11_s, ddyy11_s, ddzz11_s),
	/* !TODO! */
	tag_exit,
	answ : [[type = ts_value, 
		ts_name = "кривизна", 
		ts_alias = "kappa", 
		value = kk]],
	res : gen_solver_res(st, s_l, answ),
	debuglog(printf(false, "result=~a", res)),
	debug_end_function(),
	res)$
